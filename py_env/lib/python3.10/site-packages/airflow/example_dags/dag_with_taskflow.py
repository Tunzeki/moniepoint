from datetime import datetime, timedelta 

from airflow.decorators import dag, task

import csv, sqlite3

default_args = {
    "owner": "ademusire",
    "retries": 1,
    "retry_delay": timedelta(minutes=2)
}

@dag(
        dag_id="dag_with_sqlite_operator_v22",
        default_args=default_args,
        start_date=datetime(2023, 12, 26),
        schedule_interval="@monthly"
)
def tripdata_etl():

    @task()
    def extract():
        with open('/home/tunzeki/moniepoint/pyt_env/lib/python3.10/site-packages/airflow/example_dags/result.csv','r') as fetched_metrics:
            # csv.DictReader uses first line in file for column headings by default
            data = csv.DictReader(fetched_metrics) # comma is default delimiter
            to_db = [
                (i['month'], 
                i['sat_mean_trip_count'], 
                i['sat_mean_fare_per_trip'],
                i['sat_mean_duration_per_trip'],
                i['sun_mean_trip_count'], 
                i['sun_mean_fare_per_trip'],
                i['sun_mean_duration_per_trip']
                ) for i in data
                ]
        
        return to_db

    @task()
    def load(to_db):
        con = sqlite3.connect("/home/tunzeki/moniepoint/tripdata.db")
        cur = con.cursor()
        cur.execute("""
                    CREATE TABLE IF NOT EXISTS tripdata_monthly_statistics(
                    month TEXT PRIMARY KEY NOT NULL,
                    sat_mean_trip_count NUMERIC NOT NULL,
                    sat_mean_fare_per_trip NUMERIC NOT NULL,
                    sat_mean_duration_per_trip NUMERIC NOT NULL,
                    sun_mean_trip_count NUMERIC NOT NULL,
                    sun_mean_fare_per_trip NUMERIC NOT NULL,
                    sun_mean_duration_per_trip NUMERIC NOT NULL
                    );
                    """)
        
        cur.executemany("""
                        INSERT OR IGNORE INTO tripdata_monthly_statistics (
                        month,
                        sat_mean_trip_count,
                        sat_mean_fare_per_trip,
                        sat_mean_duration_per_trip,
                        sun_mean_trip_count,
                        sun_mean_fare_per_trip,
                        sun_mean_duration_per_trip
                        )
                        VALUES (
                        ?,
                        ?,
                        ?,
                        ?, 
                        ?,
                        ?,
                        ?
                        );
                        """, to_db)
        con.commit()
        con.close()

    extract_data = extract()
    load(to_db=extract_data)

tripdata_etl()